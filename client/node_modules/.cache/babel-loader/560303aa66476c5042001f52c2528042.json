{"ast":null,"code":"import printBuffer from './core';\nimport { timer } from './helpers';\nimport defaults from './defaults';\n/* eslint max-len: [\"error\", 110, { \"ignoreComments\": true }] */\n\n/**\n * Creates logger with following options\n *\n * @namespace\n * @param {object} options - options for logger\n * @param {string | function | object} options.level - console[level]\n * @param {boolean} options.duration - print duration of each action?\n * @param {boolean} options.timestamp - print timestamp with each action?\n * @param {object} options.colors - custom colors\n * @param {object} options.logger - implementation of the `console` API\n * @param {boolean} options.logErrors - should errors in action execution be caught, logged, and re-thrown?\n * @param {boolean} options.collapsed - is group collapsed?\n * @param {boolean} options.predicate - condition which resolves logger behavior\n * @param {function} options.stateTransformer - transform state before print\n * @param {function} options.actionTransformer - transform action before print\n * @param {function} options.errorTransformer - transform error before print\n *\n * @returns {function} logger middleware\n */\n\nfunction createLogger() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const loggerOptions = Object.assign({}, defaults, options);\n  const {\n    logger,\n    stateTransformer,\n    errorTransformer,\n    predicate,\n    logErrors,\n    diffPredicate\n  } = loggerOptions; // Return if 'console' object is not defined\n\n  if (typeof logger === 'undefined') {\n    return () => next => action => next(action);\n  } // Detect if 'createLogger' was passed directly to 'applyMiddleware'.\n\n\n  if (options.getState && options.dispatch) {\n    // eslint-disable-next-line no-console\n    console.error(`[redux-logger] redux-logger not installed. Make sure to pass logger instance as middleware:\n// Logger with default options\nimport { logger } from 'redux-logger'\nconst store = createStore(\n  reducer,\n  applyMiddleware(logger)\n)\n// Or you can create your own logger with custom options http://bit.ly/redux-logger-options\nimport createLogger from 'redux-logger'\nconst logger = createLogger({\n  // ...options\n});\nconst store = createStore(\n  reducer,\n  applyMiddleware(logger)\n)\n`);\n    return () => next => action => next(action);\n  }\n\n  const logBuffer = [];\n  return _ref => {\n    let {\n      getState\n    } = _ref;\n    return next => action => {\n      // Exit early if predicate function returns 'false'\n      if (typeof predicate === 'function' && !predicate(getState, action)) {\n        return next(action);\n      }\n\n      const logEntry = {};\n      logBuffer.push(logEntry);\n      logEntry.started = timer.now();\n      logEntry.startedTime = new Date();\n      logEntry.prevState = stateTransformer(getState());\n      logEntry.action = action;\n      let returnedValue;\n\n      if (logErrors) {\n        try {\n          returnedValue = next(action);\n        } catch (e) {\n          logEntry.error = errorTransformer(e);\n        }\n      } else {\n        returnedValue = next(action);\n      }\n\n      logEntry.took = timer.now() - logEntry.started;\n      logEntry.nextState = stateTransformer(getState());\n      const diff = loggerOptions.diff && typeof diffPredicate === 'function' ? diffPredicate(getState, action) : loggerOptions.diff;\n      printBuffer(logBuffer, Object.assign({}, loggerOptions, {\n        diff\n      }));\n      logBuffer.length = 0;\n      if (logEntry.error) throw logEntry.error;\n      return returnedValue;\n    };\n  };\n} // eslint-disable-next-line consistent-return\n\n\nconst defaultLogger = function () {\n  let {\n    dispatch,\n    getState\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  if (typeof dispatch === 'function' || typeof getState === 'function') {\n    return createLogger()({\n      dispatch,\n      getState\n    });\n  } // eslint-disable-next-line no-console\n\n\n  console.error(`\n[redux-logger v3] BREAKING CHANGE\n[redux-logger v3] Since 3.0.0 redux-logger exports by default logger with default settings.\n[redux-logger v3] Change\n[redux-logger v3] import createLogger from 'redux-logger'\n[redux-logger v3] to\n[redux-logger v3] import { createLogger } from 'redux-logger'\n`);\n};\n\nexport { defaults, createLogger, defaultLogger as logger };\nexport default defaultLogger;","map":{"version":3,"names":["printBuffer","timer","defaults","createLogger","options","loggerOptions","Object","assign","logger","stateTransformer","errorTransformer","predicate","logErrors","diffPredicate","next","action","getState","dispatch","console","error","logBuffer","logEntry","push","started","now","startedTime","Date","prevState","returnedValue","e","took","nextState","diff","length","defaultLogger"],"sources":["/home/cyrus/WebstormProjects/bigbull/client/node_modules/redux-logger/src/index.js"],"sourcesContent":["import printBuffer from './core';\nimport { timer } from './helpers';\nimport defaults from './defaults';\n/* eslint max-len: [\"error\", 110, { \"ignoreComments\": true }] */\n/**\n * Creates logger with following options\n *\n * @namespace\n * @param {object} options - options for logger\n * @param {string | function | object} options.level - console[level]\n * @param {boolean} options.duration - print duration of each action?\n * @param {boolean} options.timestamp - print timestamp with each action?\n * @param {object} options.colors - custom colors\n * @param {object} options.logger - implementation of the `console` API\n * @param {boolean} options.logErrors - should errors in action execution be caught, logged, and re-thrown?\n * @param {boolean} options.collapsed - is group collapsed?\n * @param {boolean} options.predicate - condition which resolves logger behavior\n * @param {function} options.stateTransformer - transform state before print\n * @param {function} options.actionTransformer - transform action before print\n * @param {function} options.errorTransformer - transform error before print\n *\n * @returns {function} logger middleware\n */\nfunction createLogger(options = {}) {\n  const loggerOptions = Object.assign({}, defaults, options);\n\n  const {\n    logger,\n    stateTransformer,\n    errorTransformer,\n    predicate,\n    logErrors,\n    diffPredicate,\n  } = loggerOptions;\n\n  // Return if 'console' object is not defined\n  if (typeof logger === 'undefined') {\n    return () => next => action => next(action);\n  }\n\n  // Detect if 'createLogger' was passed directly to 'applyMiddleware'.\n  if (options.getState && options.dispatch) {\n    // eslint-disable-next-line no-console\n    console.error(`[redux-logger] redux-logger not installed. Make sure to pass logger instance as middleware:\n// Logger with default options\nimport { logger } from 'redux-logger'\nconst store = createStore(\n  reducer,\n  applyMiddleware(logger)\n)\n// Or you can create your own logger with custom options http://bit.ly/redux-logger-options\nimport createLogger from 'redux-logger'\nconst logger = createLogger({\n  // ...options\n});\nconst store = createStore(\n  reducer,\n  applyMiddleware(logger)\n)\n`);\n\n    return () => next => action => next(action);\n  }\n\n  const logBuffer = [];\n\n  return ({ getState }) => next => (action) => {\n    // Exit early if predicate function returns 'false'\n    if (typeof predicate === 'function' && !predicate(getState, action)) {\n      return next(action);\n    }\n\n    const logEntry = {};\n\n    logBuffer.push(logEntry);\n\n    logEntry.started = timer.now();\n    logEntry.startedTime = new Date();\n    logEntry.prevState = stateTransformer(getState());\n    logEntry.action = action;\n\n    let returnedValue;\n    if (logErrors) {\n      try {\n        returnedValue = next(action);\n      } catch (e) {\n        logEntry.error = errorTransformer(e);\n      }\n    } else {\n      returnedValue = next(action);\n    }\n\n    logEntry.took = timer.now() - logEntry.started;\n    logEntry.nextState = stateTransformer(getState());\n\n    const diff = loggerOptions.diff && typeof diffPredicate === 'function'\n      ? diffPredicate(getState, action)\n      : loggerOptions.diff;\n\n    printBuffer(logBuffer, Object.assign({}, loggerOptions, { diff }));\n    logBuffer.length = 0;\n\n    if (logEntry.error) throw logEntry.error;\n    return returnedValue;\n  };\n}\n\n// eslint-disable-next-line consistent-return\nconst defaultLogger = ({ dispatch, getState } = {}) => {\n  if (typeof dispatch === 'function' || typeof getState === 'function') {\n    return createLogger()({ dispatch, getState });\n  }\n  // eslint-disable-next-line no-console\n  console.error(`\n[redux-logger v3] BREAKING CHANGE\n[redux-logger v3] Since 3.0.0 redux-logger exports by default logger with default settings.\n[redux-logger v3] Change\n[redux-logger v3] import createLogger from 'redux-logger'\n[redux-logger v3] to\n[redux-logger v3] import { createLogger } from 'redux-logger'\n`);\n};\n\nexport { defaults, createLogger, defaultLogger as logger };\n\nexport default defaultLogger;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}